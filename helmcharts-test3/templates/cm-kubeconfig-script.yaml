apiVersion: v1
kind: ConfigMap
metadata:
  name: create-cluster-secrets-configmap
  namespace: vault
data:
  bash.sh: |
    #!/bin/bash

    echo "# create 3 cluster variables #"

    export SA_TOKEN_NAME=$(kubectl get secret | grep $SERVICE_ACCOUNT | grep token | awk '{print $1}')
    export SA_SECRET_TOKEN=$(kubectl get secret $SA_TOKEN_NAME -n $NAMESPACE -o jsonpath='{.data..token}' | base64 --decode)
    export CLUSTER_CA_CERT=$(kubectl get secret $SA_TOKEN_NAME -n $NAMESPACE -ojsonpath='{.data..ca\.crt}')

    echo "# create the kubeconfig #"

    KUBECONFIG_CONTENT=$(cat <<EOF
    apiVersion: v1
    kind: Config
    clusters:
    - name: ${DESTINATION_CLUSTER}
      cluster:
        certificate-authority-data: ${CLUSTER_CA_CERT}
        server: ${SERVER}
    contexts:
    - name: ${SERVICE_ACCOUNT}@${DESTINATION_CLUSTER}
      context:
        cluster: ${DESTINATION_CLUSTER}
        namespace: ${NAMESPACE}
        user: ${SERVICE_ACCOUNT}
    users:
    - name: ${SERVICE_ACCOUNT}
      user:
        token: ${SA_SECRET_TOKEN}
    current-context: ${SERVICE_ACCOUNT}@${DESTINATION_CLUSTER}
    EOF
    )
    
    # Output to kubeconfig file
    echo "${KUBECONFIG_CONTENT}" > /tmp/kubeconfig.yaml 
    echo $KUBECONFIG_CONTENT

    echo "# create a secret $SECRET_NAME #"
    kubectl delete secret $SECRET_NAME -n $NAMESPACE
    kubectl create secret generic $SECRET_NAME \
      --from-literal=secret-key-ca-cert=$CLUSTER_CA_CERT \
      --from-literal=secret-key-sa-secret-token=$SA_SECRET_TOKEN \
      --from-file=secret-key-kubeconfig=/tmp/kubeconfig.yaml \
      -n $NAMESPACE

    kubectl label secret $SECRET_NAME project=multicluster -n $NAMESPACE

    sleep 100000
